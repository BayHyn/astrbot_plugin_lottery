import random
from datetime import datetime
from typing import Dict, Optional, Tuple
from enum import Enum
from astrbot.api import logger
from astrbot.core.config.astrbot_config import AstrBotConfig
from .data import LotteryPersistence


class PrizeLevel(Enum):
    """Â•ñÈ°πÁ≠âÁ∫ßÊûö‰∏æ"""

    SPECIAL = "ÁâπÁ≠âÂ•ñ"
    FIRST = "‰∏ÄÁ≠âÂ•ñ"
    SECOND = "‰∫åÁ≠âÂ•ñ"
    THIRD = "‰∏âÁ≠âÂ•ñ"
    NONE = "Êú™‰∏≠Â•ñ"

    @property
    def emoji(self) -> str:
        return {
            PrizeLevel.SPECIAL: "üéä",
            PrizeLevel.FIRST: "ü•á",
            PrizeLevel.SECOND: "ü•à",
            PrizeLevel.THIRD: "ü•â",
            PrizeLevel.NONE: "üò¢",
        }[self]

class LotteryActivity:
    """ÊäΩÂ•ñÊ¥ªÂä®Á±ª"""

    def __init__(self, group_id: str, template: dict[PrizeLevel, dict]):
        self.group_id = group_id
        self.is_active = False
        self.created_at = datetime.now().isoformat()
        self.participants = set()  # Â∑≤ÂèÇ‰∏éÁî®Êà∑IDÈõÜÂêà
        self.winners = {}  # {user_id: prize_level}
        # Â§çÂà∂Ê®°ÊùøÔºàÂê´ÂêçÁß∞Ôºâ
        self.prize_config = {
            lvl: {
                "probability": cfg["probability"],
                "count": cfg["count"],
                "remaining": cfg["count"],
                "name": cfg["name"],
            }
            for lvl, cfg in template.items()
        }

    def add_participant(self, user_id: str) -> bool:
        """Ê∑ªÂä†ÂèÇ‰∏éËÄÖ"""
        if user_id not in self.participants:
            self.participants.add(user_id)
            return True
        return False

    def has_participated(self, user_id: str) -> bool:
        """Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÂèÇ‰∏é"""
        return user_id in self.participants

    def add_winner(self, user_id: str, prize_level: PrizeLevel):
        """ËÆ∞ÂΩï‰∏≠Â•ñËÄÖ"""
        self.winners[user_id] = prize_level.value

    def to_dict(self) -> dict:
        """ËΩ¨Êç¢‰∏∫Â≠óÂÖ∏Ê†ºÂºè"""
        return {
            "group_id": self.group_id,
            "is_active": self.is_active,
            "created_at": self.created_at,
            "participants": list(self.participants),
            "winners": self.winners,
            "prize_config": {lvl.name: cfg for lvl, cfg in self.prize_config.items()},
        }

    @classmethod
    def from_dict(
        cls, data: dict, template: dict[PrizeLevel, dict]
    ) -> "LotteryActivity":
        """‰ªéÂ≠óÂÖ∏ÂàõÂª∫ÂÆû‰æã"""
        activity = cls(data["group_id"], template)
        activity.is_active = data["is_active"]
        activity.created_at = data["created_at"]
        activity.participants = set(data["participants"])
        activity.winners = data["winners"]
        return activity


class LotteryManager:
    """ÊäΩÂ•ñÁÆ°ÁêÜÁ±ª"""

    def __init__(self, persistence: LotteryPersistence, config: AstrBotConfig):
        self.activities: Dict[str, LotteryActivity] = {}
        prize_config = config["default_prize_config"]
        self.template = {PrizeLevel[k.upper()]: v for k, v in prize_config.items()}
        # Êï∞ÊçÆÊåÅ‰πÖÂåñÂØπË±°
        self.persistence = persistence
        self.persistence.load(self)

    def set_prize_config(
        self, group_id: str, prize_level: PrizeLevel, probability: float, count: int
    ) -> bool:
        """ËÆæÁΩÆÂ•ñÈ°πÈÖçÁΩÆ"""
        activity = self.activities.get(group_id)
        if not activity or not activity.is_active:
            return False
        activity.prize_config[prize_level] = {
            "probability": probability,
            "count": count,
            "remaining": count,
            "name": activity.prize_config[prize_level]["name"],  # ‰øùÁïôÂéüÂêç
        }
        self.persistence.save(self)
        return True

    def start_activity(self, group_id: str) -> Tuple[bool, str]:
        """ÂºÄÂêØÊäΩÂ•ñÊ¥ªÂä®"""
        if self.activities.get(group_id) and self.activities[group_id].is_active:
            return False, "ËØ•Áæ§Â∑≤ÊúâËøõË°å‰∏≠ÁöÑÊäΩÂ•ñÊ¥ªÂä®"
        self.activities[group_id] = LotteryActivity(group_id, self.template)
        self.activities[group_id].is_active = True
        logger.debug(f"[Lottery] Áæ§ {group_id} ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÂàõÂª∫ÔºåÂàùÂßãÊ®°ÊùøÔºö{self.template}")
        self.persistence.save(self)
        return True, "Êú¨Áæ§ÁöÑÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÂºÄÂêØ"

    def draw_lottery(
        self, group_id: str, user_id: str
    ) -> Tuple[str, Optional[PrizeLevel]]:
        """ÊäΩÂ•ñ"""
        # Ê£ÄÊü•Ê¥ªÂä®ÊòØÂê¶Â≠òÂú®‰∏îÊøÄÊ¥ª
        if group_id not in self.activities:
            logger.debug(f"[Lottery] Áæ§ {group_id} Êó†Ê¥ªÂä®ÔºåÊãíÁªùÊäΩÂ•ñ")
            return "ËØ•Áæ§Ê≤°ÊúâÊäΩÂ•ñÊ¥ªÂä®", None

        activity = self.activities[group_id]
        if not activity.is_active:
            return "ÊäΩÂ•ñÊ¥ªÂä®Êú™ÂºÄÂêØ", None

        # Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÂèÇ‰∏é
        if activity.has_participated(user_id):
            logger.debug(f"[Lottery] Áî®Êà∑ {user_id} Â∑≤ÂèÇ‰∏éËøáÔºåÊãíÁªùÈáçÂ§çÊäΩÂ•ñ")
            return "ÊÇ®Â∑≤ÁªèÂèÇ‰∏éËøáÊú¨Ê¨°ÊäΩÂ•ñ", None

        # ÊâßË°åÊäΩÂ•ñ
        prize_level = self._draw_prize(activity)
        activity.add_participant(user_id)

        if prize_level != PrizeLevel.NONE:
            activity.add_winner(user_id, prize_level)
            logger.debug(
                f"[Lottery] Áî®Êà∑ {user_id} ‰∏≠Â•ñ {prize_level.value}Ôºà{activity.prize_config[prize_level]['name']}Ôºâ"
            )
            self.persistence.save(self)
            return f"ÊÅ≠ÂñúÊÇ®‰∏≠‰∫Ü{prize_level.value}ÔºÅ", prize_level
        else:
            self.persistence.save(self)
            logger.debug(f"[Lottery] Áî®Êà∑ {user_id} Êú™‰∏≠Â•ñ")
            return "ÂæàÈÅóÊÜæÔºåÊÇ®Êú™‰∏≠Â•ñ", PrizeLevel.NONE

    def _draw_prize(self, activity: LotteryActivity) -> PrizeLevel:
        """ÊâßË°åÊäΩÂ•ñÈÄªËæë"""
        rand = random.random()
        cum = 0.0
        for lvl, cfg in sorted(
            activity.prize_config.items(), key=lambda x: x[1]["probability"]
        ):
            if cfg["remaining"] > 0:
                cum += cfg["probability"]
                if rand <= cum:
                    cfg["remaining"] -= 1
                    return lvl
        return PrizeLevel.NONE

    def stop_activity(self, group_id: str) -> Tuple[bool, str]:
        """ÂÅúÊ≠¢ÊäΩÂ•ñÊ¥ªÂä®"""
        if group_id not in self.activities:
            return False, "ËØ•Áæ§Ê≤°ÊúâÊäΩÂ•ñÊ¥ªÂä®"

        activity = self.activities[group_id]
        if not activity.is_active:
            return False, "ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÁªèÂÅúÊ≠¢"

        activity.is_active = False
        logger.debug(
            f"[Lottery] Áæ§ {group_id} Ê¥ªÂä®Â∑≤ÂÅúÊ≠¢Ôºå‰∏≠Â•ñËÆ∞ÂΩïÔºö{activity.winners}"
        )
        self.persistence.save(self)
        return True, "ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÂÅúÊ≠¢"

    def get_status_and_winners(self, group_id: str) -> Optional[dict]:
        activity = self.activities.get(group_id)
        if not activity:
            return None

        # 1. Ê¶ÇËßà
        overview = {
            "active": activity.is_active,
            "participants": len(activity.participants),
            "winners": len(activity.winners),
        }

        # 2. Â•ñÂìÅÂâ©‰Ωô
        prize_left = [
            {
                "level": lvl.value,
                "name": cfg["name"],
                "remaining": cfg["remaining"],
                "total": cfg["count"],
            }
            for lvl, cfg in activity.prize_config.items()
        ]

        # 3. ‰∏≠Â•ñÂêçÂçï
        winners_by_lvl = {}
        for uid, lvl_name in activity.winners.items():
            winners_by_lvl.setdefault(lvl_name, []).append(uid)

        return {
            "overview": overview,
            "prize_left": prize_left,
            "winners_by_lvl": winners_by_lvl,
        }
